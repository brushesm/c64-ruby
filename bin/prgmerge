#!/usr/bin/env ruby

# Merge several C64 object files into a single file suitable for
# packing with for example lzwvl

# Add hex instance method to Fixnum class
class Fixnum; def hex(digits = 4); sprintf "$%0#{digits}x", self; end; end

# Object files to inject
raise "No object files given!" if ARGV.empty?

memory = Array.new(256*256) { 0 }

addr_min = memory.size-1
addr_max = 0

# Process each object file
ARGV.each do |of|
  # Read object data into byte array
  object_data = File.read(of).bytes.to_a
  # First two bytes form load address
  address = object_data[0] + 256 * object_data[1]
  # Length of data to be injected
  length = object_data.size - 2
  # Make sure we're not injecting outside valid memory area
  raise "Data from file '#{of}' is too large to fit into memory!" if address + length > 65536
  # Log output
  $stderr.puts "Copying to #{address.hex}-#{(address+length-1).hex} from file '#{of}'."
  # Inject object data into snapshot at appropriate offset
  memory[address, length] = object_data[2..-1]
  # Remember lower and upper bounds
  addr_min = [addr_min, address].min
  addr_max = [addr_max, address + length].max
end

# Output address/size
$stderr.puts "Result file spans range #{addr_min.hex} - #{(addr_max - 1).hex}."

# Write snapshot data back to file
$stderr.puts "Writing result program to standard output."
$stdout.binmode
$stdout.write [addr_min].pack('S')
$stdout.write memory[addr_min...addr_max].pack('C*')
